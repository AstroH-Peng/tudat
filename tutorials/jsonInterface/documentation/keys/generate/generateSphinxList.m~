function generateSphinxList(file)

txt = fileread(file);
lines = strsplit(txt,'\n');
cells = {};
values = {};
children = {};
for i = 1:length(lines)
    if ~isempty(lines{i})
        parts = strtrim(strsplit(lines{i},'|'));
        for j = 1:length(parts)
            cell = parts{j};
            if j == 4
                if strcmpi(cell,'m')
                    parts{j} = 'mandatory';
                elseif strcmpi(cell,'o')
                    parts{j} = 'optional';
                elseif strcmpi(cell,'mo')
                    parts{j} = 'mandatory/optional';
                end
            end
            values{end+1} = {};
            children{end+1} = {};
            if j == 6
                cparts = split(parts{j},'+');
                if length(cparts) == 2
                    values{end} = cparts{1};
                    children{end} = cparts{2};
                else
                    if parts{j}(1) == '+'
                        children{end} = cparts{1};
                    else
                        values{end} = cparts{1};
                    end
                end
            end
        end
        cells{end+1} = parts;
    end
end
valu

filenameparts = strsplit(file,'.');
filename = filenameparts{1};
fid = fopen([filename '.rst'],'w');

fprintf(fid,'.. role:: arrow\n\n');
for i = 1:length(cells)
    fprintf(fid,'- ');
    childGenerated = false;
    if ~isempty(children{i})
        childGenerated = generateChild([children{i} '.txt']);
        if childGenerated
            fprintf(fid,'.. container:: toggle\n\n\t\t.. container:: header\n\n\t\t\t');
        end
    end
    fprintf(fid,':literal:`%s` ',cells{i}{1});
    fprintf(fid,':class:`%s` ',cells{i}{2});
    fprintf(fid,'(%s)',cells{i}{4});
    if ~isempty(cells{i}{3})
        fprintf(fid,' %s',cells{i}{3});
    end
    if isempty(cells{i}{3}) || ~strcmp(cells{i}{3}(end),'.')
        fprintf(fid,'.');
    end
    if length(cells{i}) >= 5
        if strcmp(cells{i}{1},'string')
            format = ':literal:`"%s"`';
        else
            format = ':literal:`%s`';
        end
        subchildren = {};
        if length(cells{i}) >= 6
            if ~isempty(cells{i}{6})
                fprintf(fid,' Possible values: ');
                values = strtrim(strsplit(cells{i}{6},','));
                for v = 1:length(values)
                    value = values{v};
                    if value(end) == '+'
                        value = value(1:end-1);
                        subchildren{end+1} = value;
                    end
                    fprintf(fid,format,value);
                    if v < length(values)
                        fprintf(fid,', ');
                    else
                        fprintf(fid,'.');
                    end
                end
            end
        end
        if ~isempty(cells{i}{5})
            fprintf(fid,' Default value: ');
            fprintf(fid,format,cells{i}{5});
            fprintf(fid,'.');
        end
        for j = 1:length(subchildren)
            subchild = subchildren{j};
            if generateChild(sprintf('%s-%s.txt',filename,subchild))
                fprintf(fid,'\n\n\t.. container:: toggle\n\n\t\t.. container:: header\n\n\t\t\t');
                fprintf(fid,':arrow:`%s %s`\n\n\t\t.. include:: keys/%s-%s.rst',...
                    capitalize(subchild),filename,filename,subchild);
            end
        end
    end
    if childGenerated
        fprintf(fid,' :arrow:`%s`\n\n\t\t.. include:: keys/%s.rst',capitalize(children{i}),children{i});
    end
    fprintf(fid,'\n');
end

fclose(fid);

end

function str = capitalize(str)

str = [upper(str(1)) str(2:end)];

end

function success = generateChild(file)

try
    generateSphinxList(file);
    success = true;
catch ME
    if ~strcmp(ME.identifier,'MATLAB:fileread:cannotOpenFile')
        rethrow(ME);
    end
    success = false;
end

end

